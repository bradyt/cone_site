{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cone A mobile ledger-like. The initial goal for cone, is to provide convenient data entry on the go, for users of plain text accounting. So for example, if you want to record entries like the following, this app might be for you. 2020-02-23 Squishee expenses:kwik-e-mart 10.00 USD assets:bs:checking -10.00 USD Table of contents Wiki Getting-started Links Mobile ledgers Notes Development SETUP TODOs Graphs Localizations","title":"Home"},{"location":"#cone","text":"A mobile ledger-like. The initial goal for cone, is to provide convenient data entry on the go, for users of plain text accounting. So for example, if you want to record entries like the following, this app might be for you. 2020-02-23 Squishee expenses:kwik-e-mart 10.00 USD assets:bs:checking -10.00 USD","title":"cone"},{"location":"#table-of-contents","text":"Wiki Getting-started Links Mobile ledgers Notes Development SETUP TODOs Graphs Localizations","title":"Table of contents"},{"location":"iossupport/","text":"Support: For questions and support issues: Email me at ios_cone@tangential.info , and/or Consider the issue tracker at https://github.com/bradyt/cone/issues . This page is for: In response to App Store review, and https://developer.apple.com/app-store/review/guidelines/ . Guideline 1.5 - Safety - Developer Information The support URL specified in your app\u2019s metadata, https://cone.tangential.info , does not properly navigate to the intended destination. Next Steps To resolve this issue, please revise your app\u2019s support URL to ensure it directs users to a webpage with support information.","title":"Support:"},{"location":"iossupport/#support","text":"For questions and support issues: Email me at ios_cone@tangential.info , and/or Consider the issue tracker at https://github.com/bradyt/cone/issues .","title":"Support:"},{"location":"iossupport/#this-page-is-for","text":"In response to App Store review, and https://developer.apple.com/app-store/review/guidelines/ . Guideline 1.5 - Safety - Developer Information The support URL specified in your app\u2019s metadata, https://cone.tangential.info , does not properly navigate to the intended destination. Next Steps To resolve this issue, please revise your app\u2019s support URL to ensure it directs users to a webpage with support information.","title":"This page is for:"},{"location":"privacypolicy/","text":"We don\u2019t include any tracking or analytics, and gather no user data whatsoever. Copied from https://orgro.org/privacypolicy/ .","title":"Privacypolicy"},{"location":"development/Graphs/","text":"pub global activate dcdg dcdg --package ../cone > cone.uml brew install plantuml plantuml -tlatex cone.uml # pdflatex (e.g., MacTeX) pdflatex cone.pdf","title":"Graphs"},{"location":"development/Localizations/","text":"Quick script to add a few languages via simple google translate. import 'package:translator/translator.dart'; main(List<String> arguments) async { final translator = GoogleTranslator(); final locales = [ 'de', 'hi', 'in', 'it', 'ja', 'fr', 'th', 'tl', 'zh', ]; var values = <String, String>{ 'addTransaction': 'Add transaction', 'currencyOnLeft': 'Currency on left', 'defaultCurrency': 'Default Currency', 'enterDefaultCurrency': 'Enter default currency', 'ledgerFile': 'Ledger file', 'settings': 'Settings', 'submit': 'Submit', }; Future<String> getForLanguage(String targetLocale) async { String result = '\\'$targetLocale\\': <String, String>{\\n'; for (MapEntry entry in values.entries) { result += ' \\'${entry.key}\\': \\''; result += await translator.translate(entry.value, from: 'en', to: targetLocale); result += '\\',\\n'; } result += '},'; return result; } for (String locale in locales) { print(await getForLanguage(locale)); } }","title":"Localizations"},{"location":"development/SETUP/","text":"Source code Source code is available at https://github.com/bradyt/cone . Run app from source Install flutter . This should include the following: Modifying PATH Checking flutter doctor Android setup (including, Android device and/or Android emulator) To verify your flutter setup, you can skip to the test drive . Note that I don't find it important to setup some editor, but rather, to make sure flutter works from your terminal. Note that this step includes the following: Check flutter devices git clone https://github.com/bradyt/cone cd cone/cone_flutter flutter run --flavor=dev --device <see flutter devices> (Regarding flavor, see https://github.com/flutter/flutter/issues/22856 ) You can substitute for some of the steps above if you'd like to try --device macos or --device chrome , etc, but those are not officially supported yet; for example, macos and web are not on Flutter's stable branch yet. I have been using --device macos locally to make some development easier. There is no file provider on web, we need a solution. Android specific If you get command not found: adb , try something like export PATH=\"$PATH:/Users/alice/Library/Android/sdk/platform-tools\" Contributing This section probably should be moved to PR templates. I believe any pull requests will be checked on Travis. This includes testing with the formatter, the analyzer, running tests, and checking code coverage. See ci-script.sh at base of project. Please also check conventions for formatting commits, spelling, and rebase your commits until they are clear. If a commit was added to fix another commit in your PR, please combine them. Screenshots In one terminal, use flutter run , and note the observatory uri. In a second terminal, use flutter screenshot --type=rasterizer --observatory-uri=<uri-from-above> F-Droid Make sure cone builds on fdroid As described at https://gitlab.com/fdroid/fdroiddata/blob/master/CONTRIBUTING.md#building-it , verify the following command runs successfully. fdroid build -v -l info.tangential.cone If it breaks, we either need to change the cone project, or the metadata at fdroiddata. Modifying the metadata at fdroiddata run fdroid executable from git fetch upstream fdroiddata, merge master update fdroiddata/metadata/info.tangential.cone.yml run all the checks outlined at https://gitlab.com/fdroid/fdroiddata/blob/master/CONTRIBUTING.md#building-it fdroid readmeta fdroid rewritemeta info.tangential.cone fdroid checkupdates info.tangential.cone fdroid lint info.tangential.cone fdroid build -v -l info.tangential.cone Google Play flutter clean flutter build appbundle fastlane cd cone_flutter/android echo 'source \"https://rubygems.org\"\\n\\ngem \"fastlane\"' > Gemfile gem install --user-install bundler bundle config set path 'vendor/bundle' bundle install echo '\\n/vendor/bundle/' >> .gitignore","title":"SETUP"},{"location":"development/SETUP/#source-code","text":"Source code is available at https://github.com/bradyt/cone .","title":"Source code"},{"location":"development/SETUP/#run-app-from-source","text":"Install flutter . This should include the following: Modifying PATH Checking flutter doctor Android setup (including, Android device and/or Android emulator) To verify your flutter setup, you can skip to the test drive . Note that I don't find it important to setup some editor, but rather, to make sure flutter works from your terminal. Note that this step includes the following: Check flutter devices git clone https://github.com/bradyt/cone cd cone/cone_flutter flutter run --flavor=dev --device <see flutter devices> (Regarding flavor, see https://github.com/flutter/flutter/issues/22856 ) You can substitute for some of the steps above if you'd like to try --device macos or --device chrome , etc, but those are not officially supported yet; for example, macos and web are not on Flutter's stable branch yet. I have been using --device macos locally to make some development easier. There is no file provider on web, we need a solution.","title":"Run app from source"},{"location":"development/SETUP/#android-specific","text":"If you get command not found: adb , try something like export PATH=\"$PATH:/Users/alice/Library/Android/sdk/platform-tools\"","title":"Android specific"},{"location":"development/SETUP/#contributing","text":"This section probably should be moved to PR templates. I believe any pull requests will be checked on Travis. This includes testing with the formatter, the analyzer, running tests, and checking code coverage. See ci-script.sh at base of project. Please also check conventions for formatting commits, spelling, and rebase your commits until they are clear. If a commit was added to fix another commit in your PR, please combine them.","title":"Contributing"},{"location":"development/SETUP/#screenshots","text":"In one terminal, use flutter run , and note the observatory uri. In a second terminal, use flutter screenshot --type=rasterizer --observatory-uri=<uri-from-above>","title":"Screenshots"},{"location":"development/SETUP/#f-droid","text":"","title":"F-Droid"},{"location":"development/SETUP/#make-sure-cone-builds-on-fdroid","text":"As described at https://gitlab.com/fdroid/fdroiddata/blob/master/CONTRIBUTING.md#building-it , verify the following command runs successfully. fdroid build -v -l info.tangential.cone If it breaks, we either need to change the cone project, or the metadata at fdroiddata.","title":"Make sure cone builds on fdroid"},{"location":"development/SETUP/#modifying-the-metadata-at-fdroiddata","text":"run fdroid executable from git fetch upstream fdroiddata, merge master update fdroiddata/metadata/info.tangential.cone.yml run all the checks outlined at https://gitlab.com/fdroid/fdroiddata/blob/master/CONTRIBUTING.md#building-it fdroid readmeta fdroid rewritemeta info.tangential.cone fdroid checkupdates info.tangential.cone fdroid lint info.tangential.cone fdroid build -v -l info.tangential.cone","title":"Modifying the metadata at fdroiddata"},{"location":"development/SETUP/#google-play","text":"flutter clean flutter build appbundle","title":"Google Play"},{"location":"development/SETUP/#fastlane","text":"cd cone_flutter/android echo 'source \"https://rubygems.org\"\\n\\ngem \"fastlane\"' > Gemfile gem install --user-install bundler bundle config set path 'vendor/bundle' bundle install echo '\\n/vendor/bundle/' >> .gitignore","title":"fastlane"},{"location":"development/TODOs/","text":"Exported from TODOs.org new todos (attempt to clean up old todos) [ ] present the three states for Notes.md as file diffs? [ ] consider adding following links to wiki notes Resetting income/expense accounts to zero yearly.. Automated transaction with variable amount [ ] try to do some grouping of recently sorted todos below [ ] IRC user reports transaction with no description is not display in home page (previously reported as issue with commodity) [ ] if file only has an empty line, then a transaction, cone treats it as a comment. [ ] improve layout of wiki [ ] pull recent additions to business logic into cone lib a note on some links about locales and amounts https://community.appway.com/screen/kb/article/formatting-integers-according-to-locale-1482810848119 https://www.w3.org/International/wiki/Locale-based_forms https://docs.microsoft.com/en-us/globalization/locale/number-formatting https://docs.oracle.com/cd/E19455-01/806-0169/6j9hsml2h/index.html https://developer.android.com/training/basics/supporting-devices/languages [ ] research Focus widgets, API, in hopes of some simplifications [ ] try SelectableText https://www.youtube.com/watch?v=ZSU3ZXOs6hc [ ] try DataTable https://www.youtube.com/watch?v=ktTajqbhIcY&list=PLjxrf2q8roU23XGwz3Km7sQZFTdB996iG&index=57 [ ] try LicensePage widget [ ] try on raw key input to make TAB key work [ ] now that we are allowing another mimetype, add heuristics make mimetype viewable by user make contents of file viewable by user, even after the planned changes to homescreen add tests for different line endings, different file encodings, maybe even right to left text experiment with heuristics for reasonable data. parsing the file and finding transactions, etc, is one clue. but if the parsing is only looking for positive results, as we do now, it's not telling us if the ledger file is invalid. we could consider some existing dart tools https://pub.dev/packages/validators https://pub.dev/packages?q=convert [ ] look for idioms for clis written for dart apps https://github.com/dart-lang/sdk/blob/master/runtime/bin/main_options.cc https://github.com/dart-lang/stagehand/blob/master/pubspec.yaml#L22 https://github.com/dart-lang/dartdoc/blob/master/bin/dartdoc.dart#L46 https://github.com/flutter/flutter/blob/master/packages/flutter_tools/bin/flutter_tools.dart#L7 https://github.com/dart-lang/sdk/issues/26578 a little discussion on distributing clis https://github.com/dart-lang/sdk/wiki/Snapshots https://dart.dev/tools/dart-vm#snapshot-option old todos TODO later [ ] try flutter snapshots plugin to provide screenshots for fdroid [ ] improve the addition of rows UI [ ] cleanup the date item [ ] try developing on desktop [ ] ensure app works at various [ ] improve logging in java channel [ ] investigate all the methods leading up to the box issue, such as permissions, etc review fdroid build notes https://gitlab.com/fdroid/fdroidserver/issues/511 https://gitlab.com/fdroid/fdroiddata/merge_requests/3739 review the gradle build file [ ] press back twice to leave app from home page [ ] determine if we can specify multiple mime types, or use a heuristic to check if a file contains plain text [ ] refactor append to only look at previous contents, not edit. use trim in transaction's print if needed [ ] add linting workflow suggestions [ ] improve selection of currencies, so users can search if they're not sure the three letter code, for example Mexican Peso is MXN. [ ] add parser code [ ] continue efforts on user configurability of ledger location [ ] add notes on how to add a language to localizations currency issues [ ] make widget resize to that of contained text [ ] qwerty option [ ] decimal separator [ ] combined amount and currency field [ ] transpose amount and currency fields [X] in settings [ ] automatically based on symbol vs name [ ] with drag and drop [ ] with an option in data entry UI [ ] maybe try https://pub.dev/packages/currency_icons orhttps://pub.dev/packages/country_icons [ ] add tests [ ] start an ios branch [ ] research if there's better logging idioms than print - some idiomatic might be described at https://medium.com/flutter-community/debugprint-and-the-power-of-hiding-and-customizing-your-logs-in-dart-86881df05929 [ ] research how fastlane might benefit project in early stages [ ] work on cli, to make working on parser easier [ ] allow user to make templates for faster data entry of common purchases [ ] add localization for Chinese, Russian, as desire is raised [ ] consider details at https://directory.fsf.org/wiki/Free_Software_Directory:Requirements [ ] https://www.gnu.org/licenses/gpl-howto.en.html [ ] fill column [ ] basic offset partially done [ ] clean up code in add transaction form DONE (or partially done) but not yet on master [X] update details of project to that of current flutter create template [ ] refactor repo to contain flutter project, cli project, file parsing project. ensure this refactoring is compatible with f-droid, package managers, etc. [ ] work on parser","title":"TODOs"},{"location":"development/TODOs/#exported-from-todosorg","text":"","title":"Exported from TODOs.org"},{"location":"wiki/Features/","text":"Features Journal format","title":"Features"},{"location":"wiki/Features/#features","text":"","title":"Features"},{"location":"wiki/Features/#journal-format","text":"","title":"Journal format"},{"location":"wiki/Getting-started/","text":"Getting started But what is it? The mobile apps for Android and iOS, cone , help users write plain text financial transactions to a text file, to a location on their phone, like \"Documents\", \"Google Drive\", \"On My iPhone\", or \"iCloud Drive\". Here are a couple of example transactions. 2020-07-04 Springfield Market expenses:food:groceries 120.96 USD assets:wallet:cash 60.00 USD assets:springfield_bank:checking -180.96 USD 2020-07-05 Farmer's Market expenses:food:groceries 22.86 USD assets:wallet:cash -22.86 USD There is existing software for the personal computer that can parse these files and calculate all sorts of balances, registers and reports. We hope to add a few of these features to the mobile cone app in the not too distant future. A very simple account tree with all balances, will likely be one of the first such features. Note that you are in relative control of your data. That is one of the key features of this file format, where the original such file format was invented by John Wiegley in 2003. Note that these tools are free, and you can expect your data to be future proof. You do not have a monthly or yearly subscription. You can always print out these text files for secure and physical archives, or to some degree, print them out and hand them to your accountant. Though usually you can customize a report to your accountant's preferences. These plain text financial formats tend to appeal more to software engineers, for their personal accounting. But the format has captivated a larger audience, such as people that like to tinker, hobby, or just see features they prefer in this format. If you are curious, I understand this format is not very often used within large companies, as they will usually invest in enterprise software, but usage in small businesses seems fairly common. Quickstart guide The first step for using the cone app, is to associate an empty text file, or an existing ledger file in one of the ledger formats, such as ledger-cli's, etc. If your version of cone is 0.2.20 or older, you'll have to use some other method to create that text file. In case you are having difficulty with that, here is a text file you can download: your-plain-text-journal.txt On newer versions of cone , there should be a button to create a new empty text file and save it to one of your phone's storage location. Note that this uses a different method than the original method that picks an existing file, and many cloud providers have not implemented this feature. A workaround could be to use \"Create new file\" to put on \"Documents\" or \"On My iPhone\", then use your \"Files\" app to move that new file to your desired location, then switch back to cone and use the usual \"Pick existing file\" feature to link from that cloud location. Really it's amusing that Android and iOS do not make it easier to create a new empty text file. Now that you have a file linked to cone , you can add transactions. If you are using this app on the go, you could consider just taking receipts at point of sale, then when you have a moment sitting down, transfer the information from the receipt to your journal. If your transaction is similar to an existing one, note there is a copy feature in cone , where you can select an existing transaction and then copy it into the data entry field, and then edit the values that have changed. Note that cone will otherwise only update the date of the transaction to today's date. We hope to come up with more elegant solutions to entering data quickly. I hope you enjoy this app, at least as an interesting experiment in what this sort of app might be on mobile devices.","title":"Getting started"},{"location":"wiki/Getting-started/#getting-started","text":"","title":"Getting started"},{"location":"wiki/Getting-started/#but-what-is-it","text":"The mobile apps for Android and iOS, cone , help users write plain text financial transactions to a text file, to a location on their phone, like \"Documents\", \"Google Drive\", \"On My iPhone\", or \"iCloud Drive\". Here are a couple of example transactions. 2020-07-04 Springfield Market expenses:food:groceries 120.96 USD assets:wallet:cash 60.00 USD assets:springfield_bank:checking -180.96 USD 2020-07-05 Farmer's Market expenses:food:groceries 22.86 USD assets:wallet:cash -22.86 USD There is existing software for the personal computer that can parse these files and calculate all sorts of balances, registers and reports. We hope to add a few of these features to the mobile cone app in the not too distant future. A very simple account tree with all balances, will likely be one of the first such features. Note that you are in relative control of your data. That is one of the key features of this file format, where the original such file format was invented by John Wiegley in 2003. Note that these tools are free, and you can expect your data to be future proof. You do not have a monthly or yearly subscription. You can always print out these text files for secure and physical archives, or to some degree, print them out and hand them to your accountant. Though usually you can customize a report to your accountant's preferences. These plain text financial formats tend to appeal more to software engineers, for their personal accounting. But the format has captivated a larger audience, such as people that like to tinker, hobby, or just see features they prefer in this format. If you are curious, I understand this format is not very often used within large companies, as they will usually invest in enterprise software, but usage in small businesses seems fairly common.","title":"But what is it?"},{"location":"wiki/Getting-started/#quickstart-guide","text":"The first step for using the cone app, is to associate an empty text file, or an existing ledger file in one of the ledger formats, such as ledger-cli's, etc. If your version of cone is 0.2.20 or older, you'll have to use some other method to create that text file. In case you are having difficulty with that, here is a text file you can download: your-plain-text-journal.txt On newer versions of cone , there should be a button to create a new empty text file and save it to one of your phone's storage location. Note that this uses a different method than the original method that picks an existing file, and many cloud providers have not implemented this feature. A workaround could be to use \"Create new file\" to put on \"Documents\" or \"On My iPhone\", then use your \"Files\" app to move that new file to your desired location, then switch back to cone and use the usual \"Pick existing file\" feature to link from that cloud location. Really it's amusing that Android and iOS do not make it easier to create a new empty text file. Now that you have a file linked to cone , you can add transactions. If you are using this app on the go, you could consider just taking receipts at point of sale, then when you have a moment sitting down, transfer the information from the receipt to your journal. If your transaction is similar to an existing one, note there is a copy feature in cone , where you can select an existing transaction and then copy it into the data entry field, and then edit the values that have changed. Note that cone will otherwise only update the date of the transaction to today's date. We hope to come up with more elegant solutions to entering data quickly. I hope you enjoy this app, at least as an interesting experiment in what this sort of app might be on mobile devices.","title":"Quickstart guide"},{"location":"wiki/Links/","text":"Links Popular plain text ledgers Ledger - The original, from 2003 hledger - Haskell implementation beancount - Python implementation Additional manuals, reference Plain Text Accounting Beancount Documentation - Beancount User's Manual converted from Google Docs to markdown, and deployed via Mkdocs Ledger manual","title":"Links"},{"location":"wiki/Links/#links","text":"","title":"Links"},{"location":"wiki/Links/#popular-plain-text-ledgers","text":"Ledger - The original, from 2003 hledger - Haskell implementation beancount - Python implementation","title":"Popular plain text ledgers"},{"location":"wiki/Links/#additional-manuals-reference","text":"Plain Text Accounting Beancount Documentation - Beancount User's Manual converted from Google Docs to markdown, and deployed via Mkdocs Ledger manual","title":"Additional manuals, reference"},{"location":"wiki/Mobile-ledgers/","text":"The ecosystem of mobile-friendly plain text ledger apps is very young. Here are some of the projects pushing forward in this frontier. (Similar lists are kept at https://plaintextaccounting.org/#ui-mobile and https://hledger.org/mobile-apps.html .) Beancount Ionic Status: \"This project is currently NOT ready for end-user use!\" Source: https://gitlab.com/alex_ford/beancount-ionic Made with: Typescript , Wikipedia Angular , Wikipedia Ionic , Wikipedia Beancount Mobile Permissions: Read and write to external storage Google Play: https://play.google.com/store/apps/details?id=link.beancount.mobile Source: https://github.com/xuhcc/beancount-mobile Made with: Typescript , Wikipedia Angular , Wikipedia NativeScript , Wikipedia Cashier PWA: https://cashier.alensiljak.eu.org/favourites Source: https://gitlab.com/alensiljak/cashier Made with: Javascript Vue , Wikipedia cone Permissions: None F-Droid: https://f-droid.org/packages/info.tangential.cone/ Google Play: https://play.google.com/store/apps/details?id=info.tangential.cone Website: https://cone.tangential.info Source: https://github.com/bradyt/cone/ Made with: Dart , Wikipedia Flutter , Wikipedia Ledger Expense Tracking Status: \"This app is in development. It may be unstable.\" Google Play: https://play.google.com/store/apps/details?id=com.mpease.ledger Source: https://github.com/jduepmeier/ledger-app Made with: Java Android SDK , Wikipedia MoLe Status: \"MoLe is known to work with hledger-web versions 1.10 and 1.14.\" Permissions: Internet F-Droid: https://f-droid.org/en/packages/net.ktnx.mobileledger/ Website: https://mole.ktnx.net Made with: Java Android SDK , Wikipedia","title":"Mobile ledgers"},{"location":"wiki/Notes/","text":"These are partial and random notes. I've yet to establish a coherent summary of what the topic will be, despite several attempts. So for now, here you are. Links ledger-cli Google Groups Ledger and the accountancy equation Confusion about a few things New option for Debit/Credit reports: --dc Re: new name for hledger-equity.hs ? hledger Google Groups new name for hledger-equity.hs ? money.stackexchange.com What is the Equity account for in GnuCash In double entry accounting, how does income become equity? beancount docs Types of Accounts Equity Chart of Accounts Credits & Debits Plain Text Accounting ledger docs Stating where money goes Archiving Previous Years hledger docs hledger#close hledger accounting links Rambaud et al., Algebraic Models for Accounting Systems Ellerman, On Double-Entry Bookkeeping: The Mathematical Treatment GnuCash docs static accounting equation (dynamic) accounting equation rearranged accounting equation Wikipedia Accounting equation Retained earnings Debits and Credits Some frequently encountered conventions in plain text accounting Top level accounts assets liabilities equity income expenses Transactions must balance A typical transaction in ledger might be, 2000-01-01 an example transaction expenses:gas 10 USD assets:cash -10 USD Ledger convention is for transactions to balance, for example in the previous, 10 + (-10) = 0 , so the postings balance. In fact, this is enforced. If we try to write the following to our ledger file, 2000-01-01 an example transaction expenses:gas 10 USD assets:cash -3 USD Then ledger will emit the following error message, \u200b> 2000-01-01 an example transaction \u200b> expenses:gas 10 USD \u200b> assets:cash -3 USD Unbalanced remainder is: 7 USD Amount to balance against: 10 USD Error: Transaction does not balance Corollary, an accounting equation With the above top level accounts, and the fact that transactions must balance, this implies the following equation will hold. \\text{assets} + \\text{liabilities} + \\text{equity} + \\text{income} + \\text{expenses} = 0. Signed numbers versus debit/credit The notation chosen for plain text accounting uses signed numbers, rather than requiring the notion of debits and credits. I think we can borrow terminology from Ellerman, where they refer to the two systems as SSS and DSU. That is, single-sided accounts with signed numbers, versus double-sided accounts with unsigned numbers. So if plain text accounting had used DSU, we might have written the above transaction instead as, 2000-01-01 an example transaction debits credits expenses:gas 10 USD assets:cash 10 USD We hope you agree that the SSS version is preferable, and natural to use. If you are trying to translate between an SSS amount or account, and debit/credit terminology, a mnemonic might be as simple as \"debit is positive, credit is negative\". Note that we are implicitly flipping the sign on credit accounts, that is, liabilities, equity and income will typically have negative balances in plain text accounting. Consider that GnuCash docs provide the DSU variant of our accounting equation above, reproduced here. \\text{Assets} + \\text{Expenses} = \\text{Liabilities} + \\text{Equity} + \\text{Income}. Equity and net income There appears to be a discrepancy. Wikipedia writes the accounting equation as, \\text{Assets} = \\text{Liabilities} + \\text{Equity}. So why do our accounting equations above have two extra terms, income and expenses? Wikipedia even writes the following equations, \\begin{align*} \\text{Owner's equity} &= \\text{Contributed Capital} + \\text{Retained Earnings}, \\\\ \\text{Retained Earnings} &= \\text{Net Income} \u2212 \\text{Dividends, and} \\\\ \\text{Net Income} &= \\text{Income} \u2212 \\text{Expenses} \\end{align*} This suggests that income and expenses should be subaccounts to equity. So why do we have them as top-level accounts, or siblings to the equity account? Perhaps this quote from Wikpedia leads us to a possible viewpoint. At the end of that period, the net income (or net loss) at that point is transferred from the Profit and Loss Account to the retained earnings account. Rambaud et al. briefly share an example with this partition of accounts, for equity accounts, permanent accounts, and temporary accounts. A = A_e \\cup A_p \\cup A_t. Then further subdividing temporary accounts into revenue and expenses, A = A_e \\cup A_p \\cup A_{tr} \\cup A_{te}. They go on to suggest \"that the temporary accounts are to be closed and their balances combined and added to the retained earnings account.\" This notion that the top-level, current income and expense accounts are \"temporary\", is repeated in a few more of the links above. The equity is what we expect, every time we close the books. This seems to solve the apparent discrepancy. Wikipedia's version of accounting equation is true again, any time the top-level income and expense accounts are zeroed out. Zeroing out net income Let's see how we might do this in text accounting, with an example. Suppose in January, you have the following transactions. 2000-01-01 paycheck assets:checking 10 USD income:employer -10 USD 2000-01-01 rent expenses:rent 5 USD assets:checking -5 USD At the end of January, you might close the books by adding the following transaction, to move profits and losses to retained earnings. 2000-01-31 close 2000-01 income:employer 10 USD expenses:rent -5 USD equity:retained earnings -5 USD Now we can check our balances again. > ledger balance 5 USD assets:checking -5 USD equity:retained earnings -------------------- 0 By closing the books, we have restored the usual accounting equation. That is, for our SSS system in plain text accounting, the following equation is true again. \\text{assets} + \\text{liabilities} + \\text{equity} = 0. Plain text accounting closing It would be possible to generate the closing transaction above with hledger's close command, > hledger close income expenses --closing | sed -e 's/closing balances/retained earnings/' 2000-01-31 retained earnings expenses:rent -5 USD = 0 USD income:employer 10 USD = 0 USD equity:retained earnings -5 USD The examples I found do it a little differently, filtering on assets and liabilities, and using this to close assets and liabilities in the previous period's ledger file, and reopen just those accounts in the next period's file. > hledger close assets liabilities 2000-01-31 closing balances assets:checking -5 USD = 0 USD equity:closing balances 5 USD 2000-02-01 opening balances assets:checking 5 USD = 5 USD equity:opening balances -5 USD In some sense, this is implicitly closing net income and adding it to equity. To illustrate what we mean, let's consider another example. 2000-01-01 opening balance assets:checking 5 USD equity:opening balance -5 USD 2000-01-15 paycheck assets:checking 7 USD income:employer -7 USD Then note our equity is now -5 USD, and our net income is -7 USD. With the hledger approach, we have, > hledger close assets liabilities 2000-01-31 closing balances assets:checking -12 USD = 0 USD equity:closing balances 12 USD 2000-02-01 opening balances assets:checking 12 USD = 12 USD equity:opening balances -12 USD So now we have the new equity equal to the old equity plus net income, that is, -5 + (-7) = -12. A proof Let's see if we can add notation, and state and prove a more precise claim, corresponding with the claim made in the previous section. Our example will be that of two files, one with an ongoing record of transactions, and at end of period, we will add transactions to facilitate recording the next period to the new file. We consider three moments in time, or locations in the text ledger files, really. The first is at the end of the previous period, but before the closing transaction. The second moment we consider is after the closing transaction for that period, but in that same file. The third and final moment we consider, is after the opening transaction for the next period, in the new file. We denote the account balances for each moment with the following notation, that is, assets, liabilities, equity, income, and expenses, for each of the three moments, in order. A, L, E, I, X,\\\\ A', L', E', I', X',\\\\ A'', L'', E'', I'', X''. We can now state our claim more precisely. We claim that with the above scenario, and notation, that, \\begin{align*} E'' &= E + I + X, \\\\ I'' &= 0, \\\\ X'' &= 0. \\end{align*} In other words, considering the two moments, before closing, and after opening, we are in some sense, closing the net income and adding to equity. We don't need it for our proof, but perhaps for clarity, we provide following to denote the closing transaction. 2000-01-31 closing A' = A - A = 0 L' = L - L = 0 E' = E + (A + L) I' = I X' = X And the opening transaction we denote as, 2000-02-01 opening A'' = A L'' = L E'' = -(A + L) I'' = 0 X'' = 0 We take as given that A + L + E + I + X = 0 . Then since A + L + E'' = 0 , it quickly follows that, \\begin{align*} E'' &= E + I + X, \\\\ I'' &= 0, \\\\ X'' &= 0, \\end{align*} as was claimed. In other words, for hledger's prevailing close examples, in some sense, net income was closed and added to equity.","title":"Notes"},{"location":"wiki/Notes/#links","text":"ledger-cli Google Groups Ledger and the accountancy equation Confusion about a few things New option for Debit/Credit reports: --dc Re: new name for hledger-equity.hs ? hledger Google Groups new name for hledger-equity.hs ? money.stackexchange.com What is the Equity account for in GnuCash In double entry accounting, how does income become equity? beancount docs Types of Accounts Equity Chart of Accounts Credits & Debits Plain Text Accounting ledger docs Stating where money goes Archiving Previous Years hledger docs hledger#close hledger accounting links Rambaud et al., Algebraic Models for Accounting Systems Ellerman, On Double-Entry Bookkeeping: The Mathematical Treatment GnuCash docs static accounting equation (dynamic) accounting equation rearranged accounting equation Wikipedia Accounting equation Retained earnings Debits and Credits","title":"Links"},{"location":"wiki/Notes/#some-frequently-encountered-conventions-in-plain-text-accounting","text":"","title":"Some frequently encountered conventions in plain text accounting"},{"location":"wiki/Notes/#top-level-accounts","text":"assets liabilities equity income expenses","title":"Top level accounts"},{"location":"wiki/Notes/#transactions-must-balance","text":"A typical transaction in ledger might be, 2000-01-01 an example transaction expenses:gas 10 USD assets:cash -10 USD Ledger convention is for transactions to balance, for example in the previous, 10 + (-10) = 0 , so the postings balance. In fact, this is enforced. If we try to write the following to our ledger file, 2000-01-01 an example transaction expenses:gas 10 USD assets:cash -3 USD Then ledger will emit the following error message, \u200b> 2000-01-01 an example transaction \u200b> expenses:gas 10 USD \u200b> assets:cash -3 USD Unbalanced remainder is: 7 USD Amount to balance against: 10 USD Error: Transaction does not balance","title":"Transactions must balance"},{"location":"wiki/Notes/#corollary-an-accounting-equation","text":"With the above top level accounts, and the fact that transactions must balance, this implies the following equation will hold. \\text{assets} + \\text{liabilities} + \\text{equity} + \\text{income} + \\text{expenses} = 0.","title":"Corollary, an accounting equation"},{"location":"wiki/Notes/#signed-numbers-versus-debitcredit","text":"The notation chosen for plain text accounting uses signed numbers, rather than requiring the notion of debits and credits. I think we can borrow terminology from Ellerman, where they refer to the two systems as SSS and DSU. That is, single-sided accounts with signed numbers, versus double-sided accounts with unsigned numbers. So if plain text accounting had used DSU, we might have written the above transaction instead as, 2000-01-01 an example transaction debits credits expenses:gas 10 USD assets:cash 10 USD We hope you agree that the SSS version is preferable, and natural to use. If you are trying to translate between an SSS amount or account, and debit/credit terminology, a mnemonic might be as simple as \"debit is positive, credit is negative\". Note that we are implicitly flipping the sign on credit accounts, that is, liabilities, equity and income will typically have negative balances in plain text accounting. Consider that GnuCash docs provide the DSU variant of our accounting equation above, reproduced here. \\text{Assets} + \\text{Expenses} = \\text{Liabilities} + \\text{Equity} + \\text{Income}.","title":"Signed numbers versus debit/credit"},{"location":"wiki/Notes/#equity-and-net-income","text":"There appears to be a discrepancy. Wikipedia writes the accounting equation as, \\text{Assets} = \\text{Liabilities} + \\text{Equity}. So why do our accounting equations above have two extra terms, income and expenses? Wikipedia even writes the following equations, \\begin{align*} \\text{Owner's equity} &= \\text{Contributed Capital} + \\text{Retained Earnings}, \\\\ \\text{Retained Earnings} &= \\text{Net Income} \u2212 \\text{Dividends, and} \\\\ \\text{Net Income} &= \\text{Income} \u2212 \\text{Expenses} \\end{align*} This suggests that income and expenses should be subaccounts to equity. So why do we have them as top-level accounts, or siblings to the equity account? Perhaps this quote from Wikpedia leads us to a possible viewpoint. At the end of that period, the net income (or net loss) at that point is transferred from the Profit and Loss Account to the retained earnings account. Rambaud et al. briefly share an example with this partition of accounts, for equity accounts, permanent accounts, and temporary accounts. A = A_e \\cup A_p \\cup A_t. Then further subdividing temporary accounts into revenue and expenses, A = A_e \\cup A_p \\cup A_{tr} \\cup A_{te}. They go on to suggest \"that the temporary accounts are to be closed and their balances combined and added to the retained earnings account.\" This notion that the top-level, current income and expense accounts are \"temporary\", is repeated in a few more of the links above. The equity is what we expect, every time we close the books. This seems to solve the apparent discrepancy. Wikipedia's version of accounting equation is true again, any time the top-level income and expense accounts are zeroed out.","title":"Equity and net income"},{"location":"wiki/Notes/#zeroing-out-net-income","text":"Let's see how we might do this in text accounting, with an example. Suppose in January, you have the following transactions. 2000-01-01 paycheck assets:checking 10 USD income:employer -10 USD 2000-01-01 rent expenses:rent 5 USD assets:checking -5 USD At the end of January, you might close the books by adding the following transaction, to move profits and losses to retained earnings. 2000-01-31 close 2000-01 income:employer 10 USD expenses:rent -5 USD equity:retained earnings -5 USD Now we can check our balances again. > ledger balance 5 USD assets:checking -5 USD equity:retained earnings -------------------- 0 By closing the books, we have restored the usual accounting equation. That is, for our SSS system in plain text accounting, the following equation is true again. \\text{assets} + \\text{liabilities} + \\text{equity} = 0.","title":"Zeroing out net income"},{"location":"wiki/Notes/#plain-text-accounting-closing","text":"It would be possible to generate the closing transaction above with hledger's close command, > hledger close income expenses --closing | sed -e 's/closing balances/retained earnings/' 2000-01-31 retained earnings expenses:rent -5 USD = 0 USD income:employer 10 USD = 0 USD equity:retained earnings -5 USD The examples I found do it a little differently, filtering on assets and liabilities, and using this to close assets and liabilities in the previous period's ledger file, and reopen just those accounts in the next period's file. > hledger close assets liabilities 2000-01-31 closing balances assets:checking -5 USD = 0 USD equity:closing balances 5 USD 2000-02-01 opening balances assets:checking 5 USD = 5 USD equity:opening balances -5 USD In some sense, this is implicitly closing net income and adding it to equity. To illustrate what we mean, let's consider another example. 2000-01-01 opening balance assets:checking 5 USD equity:opening balance -5 USD 2000-01-15 paycheck assets:checking 7 USD income:employer -7 USD Then note our equity is now -5 USD, and our net income is -7 USD. With the hledger approach, we have, > hledger close assets liabilities 2000-01-31 closing balances assets:checking -12 USD = 0 USD equity:closing balances 12 USD 2000-02-01 opening balances assets:checking 12 USD = 12 USD equity:opening balances -12 USD So now we have the new equity equal to the old equity plus net income, that is, -5 + (-7) = -12.","title":"Plain text accounting closing"},{"location":"wiki/Notes/#a-proof","text":"Let's see if we can add notation, and state and prove a more precise claim, corresponding with the claim made in the previous section. Our example will be that of two files, one with an ongoing record of transactions, and at end of period, we will add transactions to facilitate recording the next period to the new file. We consider three moments in time, or locations in the text ledger files, really. The first is at the end of the previous period, but before the closing transaction. The second moment we consider is after the closing transaction for that period, but in that same file. The third and final moment we consider, is after the opening transaction for the next period, in the new file. We denote the account balances for each moment with the following notation, that is, assets, liabilities, equity, income, and expenses, for each of the three moments, in order. A, L, E, I, X,\\\\ A', L', E', I', X',\\\\ A'', L'', E'', I'', X''. We can now state our claim more precisely. We claim that with the above scenario, and notation, that, \\begin{align*} E'' &= E + I + X, \\\\ I'' &= 0, \\\\ X'' &= 0. \\end{align*} In other words, considering the two moments, before closing, and after opening, we are in some sense, closing the net income and adding to equity. We don't need it for our proof, but perhaps for clarity, we provide following to denote the closing transaction. 2000-01-31 closing A' = A - A = 0 L' = L - L = 0 E' = E + (A + L) I' = I X' = X And the opening transaction we denote as, 2000-02-01 opening A'' = A L'' = L E'' = -(A + L) I'' = 0 X'' = 0 We take as given that A + L + E + I + X = 0 . Then since A + L + E'' = 0 , it quickly follows that, \\begin{align*} E'' &= E + I + X, \\\\ I'' &= 0, \\\\ X'' &= 0, \\end{align*} as was claimed. In other words, for hledger's prevailing close examples, in some sense, net income was closed and added to equity.","title":"A proof"},{"location":"wiki/Various-example-transactions/","text":"2020-","title":"Various example transactions"},{"location":"wiki/Zeroing/","text":"In this note, we show that, for prevailing hledger close examples, the net income is, in some sense, closed out and added to equity, as it seems classical accounting would desire. First, we establish some notation. Then we will state the precise claim, and then prove it. Notation: There are three points in time that we want to give names of variables for, that is, in the previous period's file, before closing in the previous period's file, after closing in the next period's file, after opening So, for the first moment, we label the accounts A, L, E, I, X. For the second, we label them, A'', L'', E'', I'', X''. And for the third, A', L', E', I', X' Claim: With the above notation, the following equations hold, E' = E + I + X, I' = 0, X' = 0. In other words, the net income has been closed out and added to equity. Proof: The closing transaction is, 2000-01-31 closing A'' = A - A = 0 L'' = L - L = 0 E'' = E + (A + L) I'' = I X'' = X The opening transaction is, 2000-02-01 opening A' = A L' = L E' = -(A + L) I' = 0 X' = 0 Note that A + L + E' = 0. Then since A + L + E + I + X = 0, it follows that, E' - E = I + X. And since I' = X' = 0, we've proved our claim.","title":"Zeroing"}]}